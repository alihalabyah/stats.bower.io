// Generated by CoffeeScript 1.7.1
(function() {
  var authClient, authPromise, config, fetch, gapi, queries, rsvp;

  gapi = require("googleapis");

  rsvp = require("rsvp");

  config = require("./config");


  /*
   * generic GA util
   */

  authClient = new gapi.auth.JWT(config.ga.clientEmail, config.ga.privateKeyPath, null, [config.ga.scopeUri]);

  authPromise = new rsvp.Promise(function(resolve, reject) {
    var msg;
    if (process.env.GA_KEY_PATH == null) {
      msg = "ERROR: process.env.GA_KEY_PATH mismatch or " + process.env.GA_KEY_PATH;
      console.log(msg);
      reject(new Error(msg));
    } else {
      authClient.authorize(function(err, token) {
        console.log("WIP: OAuthing w/ GA...");
        if (err != null) {
          console.log("ERROR: OAuth, err = ", err);
          reject(err);
        } else {
          resolve(token);
          console.log("SUCCESS: server OAuthed w/ GA.");
        }
      });
    }
  });

  fetch = function(key) {
    return function() {
      var promises, query;
      query = queries[key];
      promises = [];
      query.queryObjs.forEach(function(queryObj) {
        var promise;
        promise = new rsvp.Promise(function(resolve, reject) {
          gapi.discover('analytics', 'v3').execute(function(err, client) {
            if (err != null) {
              reject(err);
            } else {
              client.analytics.data.ga.get(queryObj).withAuthClient(authClient).execute(function(err, result) {
                if (err != null) {
                  return reject(err);
                } else {
                  resolve(result);
                }
              });
            }
          });
        });
        promises.push(promise);
      });
      return rsvp.all(promises).then(query.transform);
    };
  };


  /*
   * define queries
   */

  queries = {};

  queries.users = {
    queryObjs: [
      {
        'ids': 'ga:' + config.ga.profile,
        'start-date': '2014-03-15',
        'end-date': 'yesterday',
        'metrics': 'ga:visits',
        'dimensions': 'ga:visitorType,ga:date'
      }
    ],
    transform: function(data) {
      return new rsvp.Promise(function(resolve, reject) {
        var result;
        result = data[0].rows;
        result.forEach(function(d) {
          d[0] = d[0] === 'New Visitor' ? 'N' : 'E';
          d[2] = +d[2];
        });
        resolve(result);
      });
    }
  };

  queries.commands = {
    queryObjs: [
      {
        'ids': 'ga:' + config.ga.profile,
        'start-date': '7daysAgo',
        'end-date': 'yesterday',
        'metrics': 'ga:visitors,ga:pageviews',
        'dimensions': 'ga:pagePathLevel1'
      }, {
        'ids': 'ga:' + config.ga.profile,
        'start-date': '14daysAgo',
        'end-date': '8daysAgo',
        'metrics': 'ga:visitors,ga:pageviews',
        'dimensions': 'ga:pagePathLevel1'
      }
    ],
    transform: function(data) {
      return new rsvp.Promise(function(resolve, reject) {
        var current, prior, result;
        current = data[0].rows;
        prior = data[1].rows;
        current.forEach(function(d) {
          d[0] = d[0].replace(/\//g, '');
          d[1] = +d[1];
          d[2] = +d[2];
        });
        prior.forEach(function(d) {
          d[0] = d[0].replace(/\//g, '');
          d[1] = +d[1];
          d[2] = +d[2];
        });
        result = current.filter(function(d) {
          return d[0].indexOf("ed") === -1;
        }).map(function(d) {
          return {
            command: d[0],
            current: {
              uses: +d[1],
              packages: +d[2]
            }
          };
        });
        result.forEach(function(command) {
          command.prior = {
            uses: prior.filter(function(d) {
              return d[0] === command.command;
            })[0][1],
            packages: prior.filter(function(d) {
              return d[0] === command.command;
            })[0][2]
          };
          command.delta = {
            uses: command.current.uses / command.prior.uses - 1,
            packages: command.current.packages / command.prior.packages - 1
          };
          switch (command.command) {
            case "install":
            case "uninstall":
            case "register":
            case "unregister":
              command.current.successes = current.filter(function(d) {
                return d[0] === command.command + 'ed';
              })[0][2];
              command.prior.successes = prior.filter(function(d) {
                return d[0] === command.command + 'ed';
              })[0][2];
              command.delta.successes = command.current.successes / command.prior.successes - 1;
          }
        });
        return resolve(result);
      });
    }
  };

  module.exports = {
    validQueryTypes: Object.keys(queries),
    queries: queries,
    authPromise: authPromise,
    fetch: fetch
  };

}).call(this);

//# sourceMappingURL=ga.map
