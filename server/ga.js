// Generated by CoffeeScript 1.7.1
(function() {
  var authClient, authPromise, config, fetch, gapi, queries, rsvp, transform;

  gapi = require("googleapis");

  rsvp = require("rsvp");

  config = require("./config");


  /*
   * generic GA util
   */

  authClient = new gapi.auth.JWT(config.ga.clientEmail, config.ga.privateKeyPath, null, [config.ga.scopeUri]);

  authPromise = new rsvp.Promise(function(resolve, reject) {
    var msg;
    if (process.env.GA_KEY_PATH == null) {
      msg = "ERROR: process.env.GA_KEY_PATH mismatch or " + process.env.GA_KEY_PATH;
      console.log(msg);
      reject(new Error(msg));
    } else {
      authClient.authorize(function(err, token) {
        console.log("WIP: OAuthing w/ GA...");
        if (err != null) {
          console.log("ERROR: OAuth, err = ", err);
          reject(err);
        } else {
          resolve(token);
          console.log("SUCCESS: server OAuthed w/ GA.");
        }
      });
    }
  });

  fetch = function(key) {
    return function() {
      var promises, queryObjs;
      queryObjs = queries[key].queryObjs;
      promises = [];
      queryObjs.forEach(function(queryObj) {
        var promise;
        promise = new rsvp.Promise(function(resolve, reject) {
          gapi.discover('analytics', 'v3').execute(function(err, client) {
            if (err != null) {
              reject(err);
            } else {
              client.analytics.data.ga.get(queryObj).withAuthClient(authClient).execute(function(err, result) {
                if (err != null) {
                  return reject(err);
                } else {
                  resolve(result);
                }
              });
            }
          });
        });
        promises.push(promise);
      });
      return rsvp.all(promises);
    };
  };

  transform = function(data) {
    return new rsvp.Promise(function(resolve, reject) {
      var result;
      result = data.rows;
      result.forEach(function(d) {
        d[0] = d[0] === 'New Visitor' ? 'N' : 'E';
      });
      resolve(result);
    });
  };


  /*
   * define queries
   */

  queries = {
    users: {
      queryObjs: [
        {
          'ids': 'ga:' + config.ga.profile,
          'start-date': '2014-03-15',
          'end-date': 'yesterday',
          'metrics': 'ga:visits',
          'dimensions': 'ga:visitorType,ga:date'
        }
      ]
    },
    commands: {
      queryObjs: [
        {
          'ids': 'ga:' + config.ga.profile,
          'start-date': '7daysAgo',
          'end-date': 'yesterday',
          'metrics': 'ga:visitors,ga:pageviews',
          'dimensions': 'ga:pagePathLevel1,ga:date'
        }, {
          'ids': 'ga:' + config.ga.profile,
          'start-date': '14daysAgo',
          'end-date': '8daysAgo',
          'metrics': 'ga:visitors,ga:pageviews',
          'dimensions': 'ga:pagePathLevel1,ga:date'
        }
      ]
    }
  };

  module.exports = {
    validQueryTypes: Object.keys(queries),
    queries: queries,
    authPromise: authPromise,
    fetch: fetch
  };

}).call(this);

//# sourceMappingURL=ga.map
