// Generated by CoffeeScript 1.7.1
(function() {
  var module;

  module = angular.module('B.Chart.Traffic', []);

  module.directive("bChartTraffic", function(d3, bGaSvc) {
    return {
      templateUrl: 'b-chart-traffic/partial.html',
      restrict: 'E',
      link: function(scope, ele, attrs) {
        var render;
        render = function(data) {
          var area, areas, canvas, h, hOrig, margin, marginBase, maxUsers, parseDate, stack, svg, w, wOrig, x, xAxis, y;
          parseDate = d3.time.format("%Y%m%d").parse;
          data.forEach(function(d) {
            d[1] = parseDate(d[1]);
            d[2] = +d[2];
          });
          data = d3.nest().key(function(d) {
            return d[0];
          }).entries(data);
          console.log(data);
          canvas = ele[0].querySelector(".b-chart-traffic").children[0];
          wOrig = d3.select(canvas).node().offsetWidth;
          hOrig = d3.select(canvas).node().offsetHeight;
          marginBase = 30;
          margin = {
            t: marginBase,
            l: marginBase,
            r: marginBase,
            b: marginBase
          };
          w = wOrig - margin.l - margin.r;
          h = hOrig - margin.t - margin.b;
          x = d3.time.scale().range([0, w]).domain(d3.extent(data[1].values, function(d) {
            return d[1];
          }));
          maxUsers = d3.max(data[0].values, function(d) {
            return d[2] + d3.max(data[1].values, function(d) {
              return d[2];
            });
          });
          y = d3.scale.linear().range([h, 0]).domain([0, maxUsers]);
          xAxis = d3.svg.axis().scale(x).orient("bottom");
          area = d3.svg.area().x(function(d) {
            return x(d[1]);
          }).y0(function(d) {
            return y(d.y0);
          }).y1(function(d) {
            return y(d.y0 + d.y);
          }).interpolate("cardinal");
          stack = d3.layout.stack().values(function(d) {
            return d.values;
          }).x(function(d) {
            return d[1];
          }).y(function(d) {
            return d[2];
          }).order("reverse");
          svg = d3.select(canvas).append("svg").attr("width", w + margin.l + margin.r).attr("height", h + margin.t + margin.b).append("g").attr("transform", "translate(" + margin.l + ", " + margin.t + ")");
          areas = svg.selectAll(".traffic").data(stack(data)).enter().append("g").attr("class", "traffic");
          areas.append("path").attr("class", function(d) {
            return "area " + d.key;
          }).attr("d", function(d) {
            console.log(d);
            return area(d.values);
          });
          svg.append("g").attr("class", "axis x").attr("transform", "translate(0, " + h + ")").call(xAxis);
        };
        bGaSvc.fetch.then(render);
      }
    };
  });

}).call(this);

//# sourceMappingURL=module.map
