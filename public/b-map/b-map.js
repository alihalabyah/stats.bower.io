// Generated by CoffeeScript 1.7.1
(function() {
  var module;

  module = angular.module('B.Map', []);

  module.directive("bMap", function(d3, bGaSvc) {
    return {
      templateUrl: 'b-map/b-map.html',
      restrict: 'E',
      link: function(scope, ele) {
        var render;
        render = function(data) {
          var canvas, chartData, colorDataDensity, colorDataUsers, colorsDensity, colorsUsers, h, hOrig, map, margin, marginBase, maxDensity, maxUsers, minDensity, w, wOrig;
          canvas = ele[0].querySelector(".b-map");
          wOrig = canvas.clientWidth;
          hOrig = canvas.clientHeight;
          marginBase = 30;
          margin = {
            t: marginBase,
            l: marginBase,
            r: marginBase,
            b: marginBase
          };
          w = wOrig - margin.l - margin.r;
          h = hOrig - margin.t - margin.b;
          maxUsers = d3.max(data, function(country) {
            return country.bUsers;
          });
          maxDensity = d3.max(data, function(country) {
            return country.bDensity;
          });
          minDensity = d3.min(data, function(country) {
            return country.bDensity;
          });
          colorsUsers = d3.scale.linear().domain([1, maxUsers]).range(["#00acee", "#EF5734"]);
          colorsDensity = d3.scale.log().domain([minDensity, maxDensity]).range(["#00acee", "#EF5734"]);
          chartData = {};
          data.forEach(function(country) {
            return chartData[country.isoCode] = {
              users: country.bUsers,
              density: country.bDensity
            };
          });
          colorDataUsers = {};
          data.forEach(function(country) {
            return colorDataUsers[country.isoCode] = colorsUsers(country.bUsers);
          });
          colorDataDensity = {};
          data.forEach(function(country) {
            return colorDataDensity[country.isoCode] = colorsDensity(country.bDensity);
          });
          map = new Datamap({
            element: canvas,
            fills: {
              defaultFill: '#cecece'
            },
            geographyConfig: {
              popupOnHover: true,
              popupTemplate: function(geo, data) {
                return "<div class=\"hoverinfo\">\n  " + geo.properties.name + "\n  <br/>\n  " + data.density + "\n</div>";
              }
            },
            data: chartData,
            setProjection: function(ele, options) {
              var path, projection;
              projection = d3.geo.mercator().scale(135).translate([ele.offsetWidth / 2, ele.offsetHeight / 1.6]);
              path = d3.geo.path().projection(projection);
              return {
                path: path,
                projection: projection
              };
            }
          });
          map.updateChoropleth(colorDataUsers);
        };
        bGaSvc.fetchGeo.then(render);
      }
    };
  });

}).call(this);

//# sourceMappingURL=b-map.map
