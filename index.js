// Generated by CoffeeScript 1.7.1
(function() {
  var app, authClient, authPromise, config, dataApi, express, fetch, gapi, rsvp, server;

  gapi = require("googleapis");

  rsvp = require("rsvp");

  express = require('express');

  app = express();

  dataApi = express.Router();


  /*
   * Config
   */

  config = {
    ga: {
      clientEmail: "1068634003933-b8cijec64sti0if00mnrbqfnrt7vaa7a@developer.gserviceaccount.com",
      privateKeyPath: process.env.GA_KEY_PATH,
      profile: "75972512",
      scopeUri: "https://www.googleapis.com/auth/analytics.readonly",
      impersonatedUser: "stats.bower.io"
    },
    types: ['traffic', 'ranking', 'geo']
  };


  /*
   * GA
   */

  authClient = new gapi.auth.JWT(config.ga.clientEmail, config.ga.privateKeyPath, null, [config.ga.scopeUri], config.ga.impersonatedUser);

  authPromise = new rsvp.Promise(function(resolve, reject) {
    authClient.authorize(function(err, token) {
      if (err != null) {
        return reject(err);
      } else {
        resolve(token);
      }
    });
    console.log("Server authed w/ GA.");
  });

  fetch = function() {
    return new rsvp.Promise(function(resolve, reject) {
      gapi.discover('analytics', 'v3').execute(function(err, client) {
        client.analytics.data.ga.get({
          'ids': "ga:" + config.ga.profile,
          'start-date': '2014-03-01',
          'end-date': 'yesterday',
          'metrics': 'ga:visits',
          'dimensions': 'ga:visitorType,ga:date'
        }).withAuthClient(authClient).execute(function(err, result) {
          if (err != null) {
            return reject(err);
          } else {
            resolve(result);
          }
        });
      });
    });
  };


  /*
   * Server & API
   */

  dataApi.param('type', function(req, res, next, id) {
    if (config.types.indexOf(id) === -1) {
      throw "Wrong request data type.";
    } else {
      req.type = id;
      next();
    }
  });

  dataApi.route('/data/:type').all(function(req, res, next) {
    console.log(req.method, req.type, req.path);
    next();
  }).get(function(req, res, next) {
    authPromise.then(fetch).then(function(result) {
      res.json(result);
    })["catch"](function(err) {
      console.log("error: ", err);
    });
  });

  app.use(dataApi);

  app.use(express["static"]('public'));

  server = app.listen(3000, function() {
    console.log("Listening on port " + (server.address().port));
  });

}).call(this);

//# sourceMappingURL=index.map
