// Generated by CoffeeScript 1.7.1
(function() {
  var app, authClient, authPromise, cache, config, dataApi, db, express, fetch, gapi, redis, rsvp, server, transform;

  config = require("./config");

  gapi = require("googleapis");

  rsvp = require("rsvp");

  express = require('express');

  redis = require('redis');


  /*
   * GA
   */

  authClient = new gapi.auth.JWT(config.ga.clientEmail, config.ga.privateKeyPath, null, [config.ga.scopeUri]);

  authPromise = new rsvp.Promise(function(resolve, reject) {
    var msg;
    if (process.env.GA_KEY_PATH == null) {
      msg = "ERROR: process.env.GA_KEY_PATH mismatch or " + process.env.GA_KEY_PATH;
      console.log(msg);
      reject(new Error(msg));
    } else {
      authClient.authorize(function(err, token) {
        console.log("WIP: OAuthing w/ GA...");
        if (err != null) {
          console.log("ERROR: OAuth, err = ", err);
          return reject(err);
        } else {
          resolve(token);
          return console.log("SUCCESS: server OAuthed w/ GA.");
        }
      });
    }
  });

  fetch = function() {
    return new rsvp.Promise(function(resolve, reject) {
      gapi.discover('analytics', 'v3').execute(function(err, client) {
        client.analytics.data.ga.get({
          'ids': "ga:" + config.ga.profile,
          'start-date': '2014-03-15',
          'end-date': 'yesterday',
          'metrics': 'ga:visits',
          'dimensions': 'ga:visitorType,ga:date'
        }).withAuthClient(authClient).execute(function(err, result) {
          if (err != null) {
            return reject(err);
          } else {
            resolve(result);
          }
        });
      });
    });
  };

  transform = function(data) {
    return new rsvp.Promise(function(resolve, reject) {
      var result;
      result = data.rows;
      result.forEach(function(d) {
        d[0] = d[0] === 'New Visitor' ? 'N' : 'E';
      });
      resolve(result);
    });
  };


  /*
   * cache GA response via redis
   */

  cache = {};

  cache.fetch = function(key) {
    return new rsvp.Promise(function(resolve, reject) {
      return db.exists(key, function(err, res) {
        if (err) {
          console.log("ERROR: redis - db.exists(" + key + ") - " + err);
          reject(err);
        } else if (res === 1) {
          console.log("INFO: cached / fetching from cache.");
          db.get(key, function(err, res) {
            if (err) {
              console.log("ERROR: redis - db.get(" + key + ") - " + err);
              reject(err);
            } else {
              resolve(JSON.parse(res));
            }
          });
        } else {
          console.log("INFO: not cached / fetching from GA.");
          return authPromise.then(fetch).then(transform).then(function(data) {
            db.set(key, JSON.stringify(data));
            resolve(data);
          })["catch"](function(err) {
            console.log("ERROR: ", err);
          });
        }
      });
    });
  };

  cache.init = function() {
    console.log("SUCCESS: Connected to Redis.");
    cache.fetch("users");
  };

  db = redis.createClient(config.db.socket);

  db.on("connect", cache.init);

  db.on("error", function(err) {
    console.log(err);
  });


  /*
   * Server & API
   */

  app = express();

  dataApi = express.Router();

  dataApi.param('type', function(req, res, next, id) {
    var err;
    if (config.types.indexOf(id) === -1) {
      err = new Error("Wrong request data type.");
      console.log("ERROR: " + err.message);
      res.json(500, {
        error: err.message
      });
    } else {
      req.type = id;
      next();
    }
  });

  dataApi.route('/data/:type').all(function(req, res, next) {
    console.log(req.method, req.type, req.path);
    next();
  }).get(function(req, res) {
    cache.fetch("users").then(function(data) {
      res.json(data);
    });
  });

  app.use(dataApi);

  app.use(express["static"]('public'));

  server = app.listen(3000, function() {
    console.log("Listening on port " + (server.address().port));
  });

}).call(this);

//# sourceMappingURL=index.map
