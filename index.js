// Generated by CoffeeScript 1.7.1
(function() {
  var app, authClient, authPromise, config, dataApi, express, fetch, gapi, rsvp, server, transform;

  gapi = require("googleapis");

  rsvp = require("rsvp");

  express = require('express');

  app = express();

  dataApi = express.Router();


  /*
   * Config
   */

  config = {
    ga: {
      clientEmail: "1068634003933-b8cijec64sti0if00mnrbqfnrt7vaa7a@developer.gserviceaccount.com",
      privateKeyPath: process.env.GA_KEY_PATH || null,
      profile: "75972512",
      scopeUri: "https://www.googleapis.com/auth/analytics.readonly"
    },
    types: ['traffic', 'ranking', 'geo']
  };


  /*
   * GA
   */

  authClient = new gapi.auth.JWT(config.ga.clientEmail, config.ga.privateKeyPath, null, [config.ga.scopeUri]);

  authPromise = new rsvp.Promise(function(resolve, reject) {
    var msg;
    if (process.env.GA_KEY_PATH == null) {
      msg = "Error: process.env.GA_KEY_PATH is " + process.env.GA_KEY_PATH;
      console.log(msg);
      reject(new Error(msg));
    } else {
      authClient.authorize(function(err, token) {
        console.log("WIP: OAuthing w/ GA...");
        if (err != null) {
          console.log("Error: OAuth - ", err);
          return reject(err);
        } else {
          resolve(token);
          return console.log("Success: server OAuthed w/ GA");
        }
      });
    }
  });

  fetch = function() {
    return new rsvp.Promise(function(resolve, reject) {
      gapi.discover('analytics', 'v3').execute(function(err, client) {
        client.analytics.data.ga.get({
          'ids': "ga:" + config.ga.profile,
          'start-date': '2014-03-15',
          'end-date': 'yesterday',
          'metrics': 'ga:visits',
          'dimensions': 'ga:visitorType,ga:date'
        }).withAuthClient(authClient).execute(function(err, result) {
          if (err != null) {
            return reject(err);
          } else {
            resolve(result);
          }
        });
      });
    });
  };

  transform = function(data) {
    return new rsvp.Promise(function(resolve, reject) {
      var result;
      result = data.rows;
      result.forEach(function(d) {
        d[0] = d[0] === 'New Visitor' ? 'N' : 'E';
      });
      resolve(result);
    });
  };


  /*
   * Server & API
   */

  dataApi.param('type', function(req, res, next, id) {
    var err;
    if (config.types.indexOf(id) === -1) {
      err = new Error("Wrong request data type.");
      console.log("Error: " + err.message);
      res.json(500, {
        error: err.message
      });
    } else {
      req.type = id;
      next();
    }
  });

  dataApi.route('/data/:type').all(function(req, res, next) {
    console.log(req.method, req.type, req.path);
    next();
  }).get(function(req, res) {
    authPromise.then(fetch).then(transform).then(function(data) {
      res.json(data);
    })["catch"](function(err) {
      console.log("Error: ", err);
    });
  });

  app.use(dataApi);

  app.use(express["static"]('public'));

  server = app.listen(3000, function() {
    console.log("Listening on port " + (server.address().port));
  });

}).call(this);

//# sourceMappingURL=index.map
